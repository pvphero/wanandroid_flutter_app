// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wanandroid_flutter/entity/article_entity.dart';
import 'package:wanandroid_flutter/generated/json/article_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case ArticleEntity:
        return articleEntityFromJson(data as ArticleEntity, json) as T;
      case ArticleData:
        return articleDataFromJson(data as ArticleData, json) as T;
      case ArticleDataData:
        return articleDataDataFromJson(data as ArticleDataData, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case ArticleEntity:
        return articleEntityToJson(data as ArticleEntity);
      case ArticleData:
        return articleDataToJson(data as ArticleData);
      case ArticleDataData:
        return articleDataDataToJson(data as ArticleDataData);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (ArticleEntity).toString()) {
      return ArticleEntity().fromJson(json);
    } else if (type == (ArticleData).toString()) {
      return ArticleData().fromJson(json);
    } else if (type == (ArticleDataData).toString()) {
      return ArticleDataData().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (List<ArticleEntity>() is M) {
      return data
          .map<ArticleEntity>((e) => ArticleEntity().fromJson(e))
          .toList() as M;
    } else if (List<ArticleData>() is M) {
      return data.map<ArticleData>((e) => ArticleData().fromJson(e)).toList()
          as M;
    } else if (List<ArticleDataData>() is M) {
      return data
          .map<ArticleDataData>((e) => ArticleDataData().fromJson(e))
          .toList() as M;
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
